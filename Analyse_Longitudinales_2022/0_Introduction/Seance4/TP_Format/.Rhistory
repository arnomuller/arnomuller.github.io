PDP = read.csv2("PDP_IND_YEAR.csv",stringsAsFactors=F) %>%
filter(SO_LOG != "") %>%                                      # On garde que les années avec logements
select(IDENT,Age,ORIG_SOC,SO_LOG,SITMAT,GEO_1,ANNAIS,gen) %>% # Selection des variables
mutate(SO_LOG=substr(SO_LOG,3,length(SO_LOG)-2)) %>%          # On enleve les 3 premiers caractéres
mutate(SITMAT=substr(SITMAT,4,length(SITMAT)-3))              # On enleve les 4 premiers caractéres
# Packages     ####
library(tidyverse)
library(TraMineR)
PDP = read.csv2("PDP_IND_YEAR.csv",stringsAsFactors=F)
View(PDP)
# Ouverture et transformation de la base :
# - Ne garder que les lignes où l'on connait le statut d'occupation
# - Ne garder que les variables d'intérêt : Identifiant, Age, Origine sociale,
# Statut d'occupation, Situation matrimoniale, Position Géographique, ainsi que
# les variable années de naissances (ANNAIS) et generation (gen).
# - Transformer la variable SO_LOG, en enlevant le numéro devant le statut
# - Faire de même pour SITMAT
table(PDP$SO_LOG)
# Ouverture et transformation de la base :
# - Ne garder que les lignes où l'on connait le statut d'occupation
# - Ne garder que les variables d'intérêt : Identifiant, Age, Origine sociale,
# Statut d'occupation, Situation matrimoniale, Position Géographique, ainsi que
# les variable années de naissances (ANNAIS) et generation (gen).
# - Transformer la variable SO_LOG, en enlevant le numéro devant le statut
# - Faire de même pour SITMAT
table(PDP$SITMAT)
PDP = read.csv2("PDP_IND_YEAR.csv",stringsAsFactors=F) %>%
filter(SO_LOG != "") %>%                                      # On garde que les années avec logements
select(IDENT,Age,ORIG_SOC,SO_LOG,SITMAT,GEO_1,ANNAIS,gen) %>% # Selection des variables
mutate(SO_LOG=substr(SO_LOG,3,length(SO_LOG)-2)) %>%          # On enleve les 3 premiers caractéres
mutate(SITMAT=substr(SITMAT,4,length(SITMAT)-3))              # On enleve les 4 premiers caractéres
Z = PDP %>%
select(IDENT,SO_LOG,Age) %>%
# On ne garde que l'identifiant, et son logement à chaque age
mutate(Age = ifelse(Age < 10, paste0("0",Age), Age))
View(Z)
# ?pivot_wider
Z = PDP %>%
select(IDENT,SO_LOG,Age) %>%
# On ne garde que l'identifiant, et son logement à chaque age
mutate(Age = ifelse(Age < 10, paste0("0",Age), Age)) %>%
# la variable age va devenir le noms des variables, il faut donc la transformer
# pour que tous les ages aient le même format (deux chiffres)
arrange(IDENT, Age) %>%
# On classe les lignes par age pour chaque individus
pivot_wider(names_from = Age,
# q=Quelle variable doit donner le nom des colonnes : Age
names_prefix = "AGE",
# J'ajoute le préfix AGE devant chaque Age pour de plus jolie nom de colonnes
names_sort = TRUE,
# Je trie les colonnes dans l'ordre ici alphabètique et numérique
values_from = SO_LOG) # Quelle valeur doit prendre la colonne ?
View(Z)
# Ici on créer une base de donnée sur les informations individuelles
Y <- PDP %>%
group_by(IDENT) %>%
slice(1) %>% # On garde la première ligne, mais grâce à group_by, on garde la 1ere ligne de chaque IDENT
select(IDENT, ORIG_SOC, ANNAIS, gen)
View(Y)
# Ici on créer une base de donnée sur les informations individuelles
Y <- PDP %>%
slice(1) %>% # On garde la première ligne, mais grâce à group_by, on garde la 1ere ligne de chaque IDENT
select(IDENT, ORIG_SOC, ANNAIS, gen)
View(Y)
Y <- PDP %>%
group_by(IDENT)
# Ici on créer une base de donnée sur les informations individuelles
Y <- PDP %>%
group_by(IDENT) %>%
slice(1) %>% # On garde la première ligne, mais grâce à group_by, on garde la 1ere ligne de chaque IDENT
select(IDENT, ORIG_SOC, ANNAIS, gen)
# On merge les informations
Z <- Z %>%
left_join(Y, by = "IDENT")
Z2 = PDP %>%
select(IDENT,SO_LOG,Age, ORIG_SOC, ANNAIS, gen) %>%
# On garde en plus les info individuelles
mutate(Age = ifelse(Age < 10, paste0("0",Age), Age)) %>%
arrange(IDENT, Age) %>%
pivot_wider(names_from = Age,
names_prefix = "AGE",
names_sort = TRUE,
values_from = SO_LOG)
A = Z %>%
pivot_longer(#cols = c(AGE00:AGE61),
# Où sont les Status d'Occupation ? marche aussi avec les numéros de colonnes
names_to = "Age",
# Nom de la nouvelle variable pour l'age
names_prefix = "AGE",
# Indiquer le préfixe à enlever à chaque âge
values_to = "SO"
# Nom de la nouvelle variable pour les statuts d'occupations à chaque âge
) %>%
arrange(IDENT,Age) %>% # Tri était déjà fait, je le met juste au cas où
mutate(Age = as.numeric(Age)) # Mieux
A = Z %>%
pivot_longer(cols = c(AGE00:AGE61),
names_to = "Age",
names_prefix = "AGE",
values_to = "SO",
values_drop_na = TRUE
# On ne garde pas les ages avec NA
) %>%
arrange(IDENT,Age) %>%
mutate(Age = as.numeric(Age))
View(A)
###############################
####     TP3 : FORMAT      ####
###############################
# Packages     ####
library(tidyverse)
library(TraMineR)
# Info         ####
# Travaux Pratique : Format de Données
# On a la base individu*année de l'enquête Peuplement et Dépeuplement de Paris:
# "PDP_IND_YEAR.csv"
# Avec :
#	IDENT : Identifiant de l'individu enquêté
#	Age : Caractéristiques de l'individu à l'âge x (Plusieurs observations par INDIVIDU)
#	ORIG_SOC : Origine et trajectoire sociale de l'individu
#	SO_LOG :  Statut d'occupation à l'âge X
#	SITMAT : Situation de l'individu à l'enquête
#	GEO_1 : Positionnement géographique de l'individu à l'âge X
# QUESTION 0 : ####
# Ouverture et transformation de la base :
# - Ne garder que les lignes où l'on connait le statut d'occupation
# - Ne garder que les variables d'intérêt : Identifiant, Age, Origine sociale,
# Statut d'occupation, Situation matrimoniale, Position Géographique, ainsi que
# les variable années de naissances (ANNAIS) et generation (gen).
# - Transformer la variable SO_LOG, en enlevant le numéro devant le statut
# - Faire de même pour SITMAT
table(PDP$SITMAT)
PDP = read.csv2("PDP_IND_YEAR.csv",stringsAsFactors=F) %>%
filter(SO_LOG != "") %>%                                      # On garde que les années avec logements
select(IDENT,Age,ORIG_SOC,SO_LOG,SITMAT,GEO_1,ANNAIS,gen) %>% # Selection des variables
mutate(SO_LOG=substr(SO_LOG,3,length(SO_LOG)-2)) %>%          # On enleve les 3 premiers caractéres
mutate(SITMAT=substr(SITMAT,4,length(SITMAT)-3))              # On enleve les 4 premiers caractéres
# Voir : ?substr
# Nombre d'individus :
length(unique(PDP$IDENT))
# length donne la longueur
# unique affiche chaque identifiant unique
# QUESTION 1 : ####
# On a un fichier INIDIVIDUS*ANNEES, on veut un fichier INIDIVIDU, qui renseigne
# les différents statuts d'occupation de chaque enquêté
# On veut également connaître les informations individuelles (année naissance, origine sociale, génération).
# Transformer en FICHIER INDIVIDUEL (ou format large) :
table(PDP$Age)
table(PDP$SO_LOG)
# Obtenir la base longue sans autre information :
# ?pivot_wider
Z = PDP %>%
select(IDENT,SO_LOG,Age) %>%
# On ne garde que l'identifiant, et son logement à chaque age
mutate(Age = ifelse(Age < 10, paste0("0",Age), Age)) %>%
# la variable age va devenir le noms des variables, il faut donc la transformer
# pour que tous les ages aient le même format (deux chiffres)
arrange(IDENT, Age) %>%
# On classe les lignes par age pour chaque individus
pivot_wider(names_from = Age,
# q=Quelle variable doit donner le nom des colonnes : Age
names_prefix = "AGE",
# J'ajoute le préfix AGE devant chaque Age pour de plus jolie nom de colonnes
names_sort = TRUE,
# Je trie les colonnes dans l'ordre ici alphabètique et numérique
values_from = SO_LOG) # Quelle valeur doit prendre la colonne ?
table(Z$'01')
# On connait pour chaque individu leur statut d'habitation à chaque âge sur une seule ligne
# mais on veut ajouter des informations socio-démographique, comme l'année de naissance
# et l'origine sociale :
# Ici on créer une base de donnée sur les informations individuelles
Y <- PDP %>%
group_by(IDENT) %>%
slice(1) %>% # On garde la première ligne, mais grâce à group_by, on garde la 1ere ligne de chaque IDENT
select(IDENT, ORIG_SOC, ANNAIS, gen)
# Comme les variables indiv sont fixes dans le temps leurs valeurs restent la même à chaque âge
# Maintenant on veut les ajouter à Z :
# On merge les informations
Z <- Z %>%
left_join(Y, by = "IDENT")
# Verif :
addmargins(table(Z$ORIG_SOC,useNA = "always"))
# On aurait également pu directement garder les informations individuelles en faisant :
Z2 = PDP %>%
select(IDENT,SO_LOG,Age, ORIG_SOC, ANNAIS, gen) %>%
# On garde en plus les info individuelles
mutate(Age = ifelse(Age < 10, paste0("0",Age), Age)) %>%
arrange(IDENT, Age) %>%
pivot_wider(names_from = Age,
names_prefix = "AGE",
names_sort = TRUE,
values_from = SO_LOG)
# QUESTION 2 : ####
#	A partir de ce fichier INDIVIDU, reconstruire un fichier INDIVIDU*AGE,
# avec une observation pour chaque changement d'âge d'un individu
# Fichier INDIVIDU => INDIVIDU*AGE (format long)
# ?pivot_longer
A = Z %>%
pivot_longer(#cols = c(AGE00:AGE61),
# Où sont les Status d'Occupation ? marche aussi avec les numéros de colonnes
names_to = "Age",
# Nom de la nouvelle variable pour l'age
names_prefix = "AGE",
# Indiquer le préfixe à enlever à chaque âge
values_to = "SO"
# Nom de la nouvelle variable pour les statuts d'occupations à chaque âge
) %>%
arrange(IDENT,Age) %>% # Tri était déjà fait, je le met juste au cas où
mutate(Age = as.numeric(Age)) # Mieux
# On voit qu'il y a beaucoup de NA pour SO, on peut les enlever avec un simple filter
# ou alors directement en faisant :
A = Z %>%
pivot_longer(cols = c(AGE00:AGE61),
names_to = "Age",
names_prefix = "AGE",
values_to = "SO",
values_drop_na = TRUE
# On ne garde pas les ages avec NA
) %>%
arrange(IDENT,Age) %>%
mutate(Age = as.numeric(Age))
# QUESTION 3 : ####
#	A partir du fichier INDIVIDU (Z), reconstruire un fichier INDIVIDU*SO,
# avec une observation pour chaque changement de statut d'occupation d'un individu.
# On s'intéresse ici aux TRANSITIONS
# Fichier INDIVIDU => INDIVIDU*EVENT (format semi-long)
E = Z %>%
pivot_longer(cols = c(AGE00:AGE61),
names_to = "Age",
names_prefix = "AGE",
values_to = "SO",
values_drop_na = TRUE) %>%
mutate(Age = as.numeric(Age))       %>%
arrange(IDENT,Age)                  %>%
# Jusque là on a fait comme avant
# Maintenant on enleve toutes les lignes où il n'y a pas de chgmt de SO avec l'année d'avant
group_by(IDENT)                     %>%
# Pour chaque individu, je resneigne à chaque âge qu'elle était le SO de l'age précédent dans SO_PREC
mutate(SO_PREC=lag(SO))             %>%
# ?lag renvoie la colonne au dessus
filter(row_number()==1 | SO_PREC != SO) %>%
#On conserve la 1ere ligne ainsi que toutes celles où SO_Prec différent de SO
select(-SO_PREC)
# On peut aussi ajouter d'autres informations comme :
# - l'âge au moment de l'enquête, dans notre cas ce serait l'age max
# - le temps passé dans chaque statut d'occupation
mutate(Age_Enq=max(Age))                      %>%
filter(row_number()==1 | SO_PREC != Statut) %>%
mutate(Nb_Ans=ifelse(row_number()!= n(),lead(Age)-Age,Age_Enq-Age))
Ebis = Z %>%
pivot_longer(cols = c(AGE00:AGE61),
names_to = "Age",
names_prefix = "AGE",
values_to = "SO",
values_drop_na = TRUE)     %>%
mutate(Age = as.numeric(Age))           %>%
arrange(IDENT,Age)                      %>%
group_by(IDENT)                         %>%
mutate(SO_PREC=lag(SO))                 %>%
mutate(Age_Enq = max(Age))              %>% # On ajoute l'age max avant de filtrer
filter(row_number()==1 | SO_PREC != SO) %>%
select(-SO_PREC)                        %>%
mutate(Nb_Ans= ifelse(row_number()!= n(), #si au sein de chaque IDENT, la ligne n'est pas la dernière ligne de cet IDENT, alors :
lead(Age)-Age, # Nb_Ans = Age dans la colonne en dessous - Age dans cette ligne
Age_Enq-Age))  # Sinon c'est qu'on est dans dernière ligne et donc qu'au moment de l'enquête il est toujours dans cette SO,
# Nb_Ans = AgeMax - Age dans cette ligne
# ?n()
# ?lead
# Remise en format individuel
B = E %>%
mutate(SO_num=paste0("SO_",row_number())) %>%
pivot_wider(id_cols = c(IDENT, SO,SO_num, ANNAIS, gen, ORIG_SOC),
names_from = SO_num,
names_sort = TRUE,
values_from = SO)
# On garde que la ligne des 35ans
A35ans <- A %>%
group_by(IDENT) %>%
filter(Age == 35) %>%
mutate(SO_c = as.factor(ifelse(SO == "Proprietaire", 1, 0)),
ORIG_SOC_c = as.factor(ifelse(ORIG_SOC %in% c("Classe moyenne ascendante", "Classe moyenne stable"),
"Moyenne",
ifelse(ORIG_SOC %in% c("Populaire", "Classe populaire descendante"),
"Populaire","Superieur"))))
table(A35ans$SO)
table(A35ans$SO_c)
table(A35ans$ORIG_SOC)
table(A35ans$ORIG_SOC_c)
table(A35ans$ANNAIS)
# On change la modalité de référence pour ORIG_SOC_c
?relevel
A35ans$ORIG_SOC_c <- relevel(A35ans$ORIG_SOC_c, "Moyenne")
# On fait la régression
reg_35ans <- glm(SO_c ~ ORIG_SOC_c + ANNAIS, family = "binomial", data = A35ans)
summary(reg_35ans)
library(tidyverse)
# Package à télécharger
# install.package("TraMineR)
library(TraMineR)
# Données d'exemple fournie par le package
data(mvad)
# Données d'exemple fournie par le package
data(mvad)
View(mvad)
# Liste des éléments de l'alphabet
names(mvad)
seqstatl(mvad[, 17:86])
# Alphabet : états possible
mvad.alphabet= c("employment", "FE", "HE", "joblessness", "school","training")
mvad.alphabet= seqstatl(mvad[, 17:86])
mvad.alphabet
# Je peux vérifier l'alphabet
alphabet(mvad.seq)
# Alphabet : états possible
mvad.alphabet= c("employment", "FE", "HE", "joblessness", "school","training")
mvad.alphabet= seqstatl(mvad[, 17:86])
# Labels long
mvad.labels=c("employment", "further education", "higher education","joblessness", "school", "training")
# Label court (pour graph)
mvad.scodes=c("EM", "FE", "HE", "JL", "SC", "TR")
# Définition de la séquence :
?seqdef
mvad.seq=seqdef(mvad,
17:86,
alphabet = mvad.alphabet,
states = mvad.scodes,
labels = mvad.labels,
xtstep = 6)
summary(mvad.seq)
mvad.seq=seqdef(mvad,
17:86,
alphabet = mvad.alphabet,
states = mvad.scodes,
labels = mvad.labels,
xtstep = 6)
View(mvad)
## longueur de la sequence
seqlength(mvad.seq)
## longueur de la sequence
unique(seqlength(mvad.seq))
seqtransn(mvad.seq)
## number of transitions
mvad.trans <- seqtransn(mvad.seq)
#les 10 premiers
mvad.trans[1:10]
seqistatd(mvad.seq)
seqistatd(mvad.seq)[1:10,]
## Sequence modale
# renvoi les 10 trajectoires plus fréquentes
seqtab(mvad.seq)
# Visualisation des 10 séquences les plus fréquentes
seqfplot(mvad.seq)
## Séquence des états modaux
# renvoi la séquence faites des états modaux à chaque temps.
seqmodst(mvad.seq)
seqmsplot(mvad.seq)
## Durée MOYENNE passée dans chaque état
apply(seqistatd(mvad.seq),2,mean)
seqmtplot(mvad.seq)
# Possible de voir par groupe :
# exemple male
seqmtplot(mvad.seq, group = mvad$male)
# Possible de voir par groupe :
# exemple male
seqmtplot(mvad.seq, group = male)
## Taux de transition entre états
transition <- seqtrate(mvad.seq)
transition
round(transition,2)
## Entropie longitudinale
seqient(mvad.seq)
hist(seqient(mvad.seq))
# Visualisation de la trajectoire des 10 premiers individus
seqiplot(mvad.seq,
border = NA,
use.layout = TRUE,
with.legend = TRUE,
legend.prop = 0.15,
cex.axis = 0.6)
# Visualisation de l'ensemble des séquences, classées par état de départ
seqIplot(mvad.seq,
sortv = "from.start",
with.legend = TRUE,
use.layout = TRUE,
legend.prop = 0.15)
seqIplot(mvad.seq,
sortv = "from.end",
with.legend = TRUE,
use.layout = TRUE,
legend.prop = 0.15)
# Visualisation de l'ensemble des séquences, classées par état de départ
seqIplot(mvad.seq,
sortv = "from.start",
with.legend = TRUE,
use.layout = TRUE,
legend.prop = 0.15)
# Visualisation de l'ensemble des séquences, classées par état de départ
seqIplot(mvad.seq,
sortv = "from.start",
with.legend = TRUE,
use.layout = TRUE,
legend.prop = 0.1)
# Visualisation de l'ensemble des séquences, classées par état de départ
seqIplot(mvad.seq,
sortv = "from.start",
with.legend = TRUE,
use.layout = TRUE,
legend.prop = 0.3)
# Par groupe :
seqIplot(mvad.seq,
group = mvad$male,
sortv = "from.start",
with.legend = TRUE,
use.layout = TRUE,
legend.prop = 0.15)
seqdplot(mvad.seq,
with.legend = TRUE,
use.layout = TRUE,
legend.prop = 0.15)
# groupe selon sexe
seqdplot(mvad.seq,
group = mvad$male,
with.legend = TRUE,
use.layout = TRUE,
legend.prop = 0.15)
seqIplot(mvad.seq,
group = mvad$male,
sortv = "from.start",
with.legend = TRUE,
use.layout = TRUE,
legend.prop = 0.15)
pdf("hop.pdf")
seqIplot(mvad.seq,
group = mvad$male,
sortv = "from.start",
with.legend = TRUE,
use.layout = TRUE,
legend.prop = 0.15)
dev.off
?pdf
pdf("hop")
seqIplot(mvad.seq,
group = mvad$male,
sortv = "from.start",
with.legend = TRUE,
use.layout = TRUE,
legend.prop = 0.15)
dev.off
